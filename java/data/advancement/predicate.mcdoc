use ::java::server::world::item::ItemBase
use ::java::server::util::inventory::EquipmentSlot
use super::super::util::MinMaxBounds

struct ItemPredicate {
	item?: #[id=item] string,
	tag?: #[id(registry=item,tags=implicit)] string,
	count?: MinMaxBounds<int>,
	durability?: MinMaxBounds<int>,
	potion?: #[id=potion] string,
	enchantments?: [EnchantmentPredicate],
	nbt?: #[nbt=ItemBase] string, // TODO
}

struct EnchantmentPredicate {
	enchantment?: #[id=enchantment] string,
	levels?: MinMaxBounds<int>,
}

struct BlockPredicate {
	block?: #[id=block] string,
	tag?: #[id(registry=block,tags=implicit)] string,
	state?: struct {
		[string]: (MinMaxBounds<int> | boolean | string), // TODO
	},
	nbt?: #[nbt=ItemBase] string, // TODO
}

struct FluidPredicate {
	fluid?: #[id=fluid] string,
	tag?: #[id(registry=fluid,tags=implicit)] string,
	state?: struct {
		[string]: (MinMaxBounds<int> | boolean | string), // TODO
	},
}

struct LocationPredicate {
	position?: struct {
		x?: MinMaxBounds<float>,
		y?: MinMaxBounds<float>,
		z?: MinMaxBounds<float>,
	},
	biome?: (
		#[until=1.16] #[id=biome] string |
		#[since=1.16] #[id="worldgen/biome"] string |
	),
	feature?: (
		#[until="1.18.2"] string |
		#[since="1.18.2"] #[id="worldgen/configured_structure_feature"] string |
	),
	dimension?: #[id=dimension] string,
	light?: struct {
		light?: MinMaxBounds<int @ 0..15>,
	},
	block?: BlockPredicate,
	fluid?: FluidPredicate,
	#[since=1.16]
	smokey?: boolean,
}

struct EntityPredicate {
	type?: #[id(registry=entity_type,tags=allowed)] string,
	team?: #[team] string,
	nbt?: #[nbt=TODO] string, // TODO
	location?: LocationPredicate,
	distance?: DistancePredicate,
	flags?: struct {
		is_on_fire?: boolean,
		is_sneaking?: boolean,
		is_sprinting?: boolean,
		is_swimming?: boolean,
		is_baby?: boolean,
	},
	equipment?: struct {
		[EquipmentSlot]: ItemPredicate,
	},
	player?: PlayerPredicate,
	#[since=1.16]
	vehicle?: EntityPredicate,
	#[since=1.16]
	targeted_entity?: EntityPredicate,
	#[since=1.16]
	fishing_hook?: struct {
		in_open_water?: boolean,
	},
	catType?: string,
	effects?: struct {
		[#[id=mob_effect] string]: MobEffectPredicate,
	},
}

struct DistancePredicate {
	x?: MinMaxBounds<float>,
	y?: MinMaxBounds<float>,
	z?: MinMaxBounds<float>,
	absolute?: MinMaxBounds<float>,
	horizontal?: MinMaxBounds<float>,
}

struct PlayerPredicate {
	gamemode?: GameMode,
	level?: MinMaxBounds<int>,
	advancements?: struct {
		[#[id=advancement] string]: (boolean | struct {
			[string]: boolean,
		}),
	},
	recipes?: struct {
		[#[id=recipe] string]: boolean,
	},
	stats?: [StatisticPredicate],
}

enum(string) GameMode {
	Survival = "survival",
	Creative = "creative",
	Adventure = "adventure",
	Spectator = "spectator",
}

struct StatisticPredicate {
	type: #[id=stat_type] string,
	stat: minecraft:statistic_type[[type]],
	value: MinMaxBounds<int>,
}

dispatch minecraft:statistic_type[%unknown] to string

dispatch minecraft:statistic_type[mined] to #[id=block] string

dispatch minecraft:statistic_type[crafted,used,broken,picked_up,dropped] to #[id=item] string

dispatch minecraft:statistic_type[killed,killed_by] to #[id=entity_type] string

dispatch minecraft:statistic_type[custom] to #[id=custom_stat] string

struct MobEffectPredicate {
	amplifier?: MinMaxBounds<int>,
	duration?: MinMaxBounds<int>,
	ambient?: boolean,
	visible?: boolean,
}

struct DamagePredicate {
	dealt?: MinMaxBounds<float>,
	taken?: MinMaxBounds<float>,
	blocked?: boolean,
	source_entity?: EntityPredicate,
	type?: DamageSourcePredicate,
}

struct DamageSourcePredicate {
	is_explosion?: boolean,
	is_fire?: boolean,
	is_magic?: boolean,
	is_projectile?: boolean,
	is_lightning?: boolean,
	bypasses_armor?: boolean,
	bypasses_invulnerability?: boolean,
	bypasses_magic?: boolean,
	source_entity?: EntityPredicate,
	direct_entity?: EntityPredicate,
}
