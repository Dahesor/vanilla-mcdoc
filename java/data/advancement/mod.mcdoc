use ::java::server::world::item::DefaultItemComponents
use ::java::server::util::text::Text

dispatch minecraft:resource[advancement] to struct Advancement {
	/// If present, advancement will be visible in the advancement tabs.
	display?: struct {
		icon: struct {
			#[until="1.20.5"]
			item: #[id=item] string,
			#[until="1.20.5"]
			nbt?: #[nbt(registry=minecraft:item[[item]])] string, // TODO: This needs hardcoding to include DefaultItemTags
			#[since="1.20.5"]
			id: #[id=item] string,
			#[since="1.20.5"]
			components?: struct {
				...DefaultItemComponents,
				...minecraft:item[[items]],
			},
		},
		title: Text,
		description: Text,
		/// Used for the advancement tab (root advancement only).
		background?: #[id=texture] string,
		/// Controls the advancement tile frame. Defaults to `task`.
		frame?: enum(string) {
			/// Normal border.
			Task = "task",
			/// Fancy spiked border (used for the kill all mobs advancement).
			Challenge = "challenge",
			/// Rounded border (used for the full beacon advancement).
			Goal = "goal",
		},
		/// Whether to show the toast pop up after completing this advancement. Defaults to `true`.
		show_toast?: boolean,
		/// Whether to announce in the chat when this advancement has been completed. Defaults to `true`.
		announce_to_chat?: boolean,
		/// Whether or not to hide this advancement and all its children from the advancement screen,
		/// until this advancement have been completed.
		/// Has no effect on root advancements themselves, but still affects all their children.
		/// Defaults to `false`.
		hidden?: boolean,
	},
	/// If this field is absent, this advancement is a root advancement.
	/// Circular references cause a loading failure.
	parent?: #[id=advancement] string,
	/// If `requirements` is not defined, all defined criteria will be required.
	criteria: struct {
		[string]: struct {
			/// Many triggers can occur multiple times, however, the reward will only be provided multiple times if the advancement is first revoked, which is often done within the function reward.
			trigger: (
				#[until="1.20.3"] #[id] Trigger |
				#[since="1.20.3"] #[id=trigger_type] string | 
			),
			conditions?: minecraft:trigger[[trigger]],
		},
	},
	/// Contains all of the `criteria` keys.
	/// If all criteria are required at once, this may be omitted.
	/// With multiple criteria: this contains a list of lists with criteria (all criteria must be mentioned).
	/// If all of the lists each have any criteria met, the advancement is complete (basically AND grouping of OR groups).
	requirements?: [[string]], // TODO
	/// Provided to the player when this advancement is obtained.
	rewards?: struct {
		/// Function to run as the player (not at). Function group tags are not allowed.
		function?: #[id=function] string,
		/// Loot tables to give.
		loot?: [#[id=loot_table] string],
		/// Recipes to unlock.
		recipes?: [#[id=recipe] string],
		/// XP to add.
		experience?: int,
	},
}

enum(string) Trigger {
	#[since=1.19] AllayDropItemOnBlock = "allay_drop_item_on_block",
	#[since=1.19] AvoidVibration = "avoid_vibration",
	BeeNestDestroyed = "bee_nest_destroyed",
	BredAnimals = "bred_animals",
	BrewedPotion = "brewed_potion",
	ChangedDimension = "changed_dimension",
	ChanneledLightning = "channeled_lightning",
	ConstructBeacon = "construct_beacon",
	ConsumeItem = "consume_item",
	CuredZombieVillager = "cured_zombie_villager",
	EffectsChanged = "effects_changed",
	EnchantedItem = "enchanted_item",
	EnterBlock = "enter_block",
	EntityHurtPlayer = "entity_hurt_player",
	EntityKilledPlayer = "entity_killed_player",
	#[since=1.18] FallFromHeight = "fall_from_height",
	FilledBucket = "filled_bucket",
	FishingRodHooked = "fishing_rod_hooked",
	HeroOfTheVillage = "hero_of_the_village",
	Impossible = "impossible",
	InventoryChanged = "inventory_changed",
	ItemDurabilityChanged = "item_durability_changed",
	#[since=1.16] ItemUsedOnBlock = "item_used_on_block",
	#[since=1.19] KillMobNearSculkCatalyst = "kill_mob_near_sculk_catalyst",
	KilledByCrossbow = "killed_by_crossbow",
	Levitation = "levitation",
	#[since=1.17] LightningStrike = "lightning_strike",
	Location = "location",
	NetherTravel = "nether_travel",
	PlacedBlock = "placed_block",
	#[since=1.16] PlayerGeneratesContainerLoot = "player_generates_container_loot",
	PlayerHurtEntity = "player_hurt_entity",
	#[since=1.16] PlayerInteractedWithEntity = "player_interacted_with_entity",
	PlayerKilledEntity = "player_killed_entity",
	RecipeUnlocked = "recipe_unlocked",
	#[since=1.18] RideEntityInLava = "ride_entity_in_lava",
	ShotCrossbow = "shot_crossbow",
	#[until=1.16] SafelyHarvestHoney = "safely_harvest_honey",
	SleptInBed = "slept_in_bed",
	SlideDownBlock = "slide_down_block",
	#[since=1.17] StartedRiding = "started_riding",
	SummonedEntity = "summoned_entity",
	TameAnimal = "tame_animal",
	#[since=1.16] TargetHit = "target_hit",
	#[since=1.16] ThrownItemPickedUpByEntity = "thrown_item_picked_up_by_entity",
	#[since=1.19] ThrownItemPickedUpByPlayer = "thrown_item_picked_up_by_player",
	Tick = "tick",
	UsedEnderEye = "used_ender_eye",
	UsedTotem = "used_totem",
	#[since=1.17] UsingItem = "using_item",
	VillagerTrade = "villager_trade",
	VoluntaryExile = "voluntary_exile",
}
