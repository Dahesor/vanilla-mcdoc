use super::loot::function::CopyNameSource
use super::loot::function::EntityTarget

type MinMaxBounds<T> = (
	T |
	struct {
		min?: T,
		max?: T,
	} |
)

type RandomValueBounds = (
	float |
	struct {
		min: float,
		max: float,
	} |
)

type RandomIntGenerator = (
	int |
	struct {
		type?: RandomIntGeneratorType,
		...minecraft:random_int_generator[[type]],
	} |
)

enum(string) RandomIntGeneratorType {
	Uniform = "uniform",
	Binomial = "binomial",
	Constant = "constant",
}

dispatch minecraft:random_int_generator[uniform,%none] to struct UniformIntGenerator {
	min?: int,
	max?: int,
}

dispatch minecraft:random_int_generator[binomial] to struct BinomialIntGenerator {
	n: int @ 0..,
	p: float @ 0..1,
}

dispatch minecraft:random_int_generator[constant] to struct ConstantIntGenerator {
	value: int,
}

type NumberProvider = (
	float |
	struct {
		type?: #[id=loot_number_provider_type] string,
		...minecraft:number_provider[[type]],
	} |
)

dispatch minecraft:number_provider[uniform,%none] to struct UniformNumberProvider {
	min?: NumberProvider,
	max?: NumberProvider,
}

dispatch minecraft:number_provider[binomial] to struct BinomialNumberProvider {
	n: NumberProvider,
	p: NumberProvider,
}

dispatch minecraft:number_provider[constant] to struct ConstantNumberProvider {
	value: float,
}

dispatch minecraft:number_provider[score] to struct ScoreNumberProvider {
	target: ScoreProvider,
	score: #[command_argument=objective] string,
	scale?: float,
}

type ScoreProvider = (
	EntityTarget |
	struct {
		type: #[id=loot_score_provider_type] string,
		...minecraft:score_provider[[type]],
	} |
)

dispatch minecraft:score_provider[context] to struct ContextScoreProvider {
	target: EntityTarget,
}

dispatch minecraft:score_provider[fixed] to struct FixedScoreProvider {
	name: #[command_argument=score_holder] string,
}

dispatch minecraft:number_provider[storage] to struct StorageNumberProvider {
	source: #[id=storage] string,
	path: string,
}

type NbtProvider = (
	CopyNameSource |
	struct {
		type: #[id=loot_nbt_provider_type] string,
		...minecraft:nbt_provider[[type]],
	} |
)

dispatch minecraft:nbt_provider[context] to struct ContextNbtProvider {
	target: CopyNameSource,
}

dispatch minecraft:nbt_provider[storage] to struct StorageNbtProvider {
	source: #[id=storage] string,
}

type ArmorMaterials = ("leather" | "chainmail" | "iron" | "gold" | "diamond" | "turtle" | "netherite")