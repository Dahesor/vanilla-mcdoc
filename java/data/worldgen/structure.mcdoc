use super::HeightProvider
use super::biome::MobCategory
use super::biome::SpawnerData

type ConfiguredStructureRef = (
	#[id="worldgen/configured_structure_feature"] string |
	ConfiguredStructure |
)

struct ConfiguredStructure {
	type: #[id="worldgen/structure_feature"] string,
	config: minecraft:structure_config[[type]],
	#[since="1.18.2"]
	biomes: (
		[#[id="worldgen/biome"] string] |
		#[id(registry="worldgen/biome",tags=allowed)] string |
	),
	#[since="1.18.2"]
	adapt_noise?: boolean,
	#[since="1.18.2"]
	spawn_overrides: struct {
		[MobCategory]: SpawnOverride,
	},
}

struct SpawnOverride {
	bounding_box: BoundingBox,
	spawns: SpawnerData,
}

enum(string) BoundingBox {
	Piece = "piece",
	Full = "full",
}

dispatch minecraft:structure_config[
	bastion_remnant,
	pillager_outpost,
	villager,
] to struct Jigsaw {
	start_pool: #[id="worldgen/template_pool"] string,
	size: int @ 0..7,
}

dispatch minecraft:structure_config[buried_treasure] to struct BuriedTreasure {
	probability: float @ 0..1,
}

dispatch minecraft:structure_config[mineshaft] to struct Mineshaft {
	type: MineshaftType,
	probability: float @ 0..1,
}

enum(string) MineshaftType {
	Normal = "normal",
	Mesa = "mesa",
}

#[since=1.17]
dispatch minecraft:structure_config[nether_fossil] to struct NetherFossil {
	height: HeightProvider
}

dispatch minecraft:structure_config[ocean_ruin] to struct OceanRuin {
	biome_temp: BiomeTemperature,
	large_probability: float @ 0..1,
	cluster_probability: float @ 0..1,
}

enum(string) BiomeTemperature {
	Cold = "cold",
	Warm = "warm",
}

dispatch minecraft:structure_config[ruined_portal] to struct RuinedPortal {
	portal_type: RuinedPortalType,
}

enum(string) RuinedPortalType {
	Standard = "standard",
	Desert = "desert",
	Jungle = "jungle",
	Mountain = "mountain",
	Nether = "nether",
	Ocean = "ocean",
	Swamp = "swamp",
}

dispatch minecraft:structure_config[shipwreck] to struct Shipwreck {
	is_beached?: boolean,
}
