use ::java::server::util::block_state::BlockState
use super::HeightmapType

type ProcessorListRef = (
	#[id="worldgen/processor_list"] string |
	ProcessorList |
)

struct ProcessorList {
	processors: [Processor],
}

struct Processor {
	processor_type: #[id="worldgen/structure_processor"] string,
	...minecraft:template_processor[[processor_type]],
}

dispatch minecraft:template_processor[block_age] to struct BlockAge {
	mossiness: float,
}

dispatch minecraft:template_processor[block_ignore] to struct BlockIgnore {
	blocks: [BlockState],
}

dispatch minecraft:template_processor[block_rot] to struct BlockRot {
	integrity: float @ 0..1,
}

dispatch minecraft:template_processor[gravity] to struct Gravity {
	heightmap: HeightmapType,
	offset: int,
}

#[since=1.17]
dispatch minecraft:template_processor[protected_blocks] to struct ProtectedBlocks {
	value: #[id(registry=block,tags=implicit)] string,
}

dispatch minecraft:template_processor[rule] to struct Rule {
	rules: [ProcessorRule],
}

struct ProcessorRule {
	position_predicate?: PosRuleTest,
	location_predicate: RuleTest,
	input_predicate: RuleTest,
	output_state: BlockState,
	output_nbt: minecraft:block[[output_state.Name]],
}

struct PosRuleTest {
	predicate_type: #[id=pos_rule_test] string,
	...minecraft:pos_rule_test[[predicate_type]],
}

dispatch minecraft:pos_rule_test[linear_pos] to struct LinearPos {
	min_dist?: int @ 0..255,
	max_dist?: int @ 0..255,
	min_chance?: float @ 0..1,
	max_chance?: float @ 0..1,
}

dispatch minecraft:pos_rule_test[axis_aligned_linear_pos] to struct AxisAlignedLinearPos {
	axis: Axis,
	...LinearPos,
}

enum(string) Axis {
	X = "x",
	Y = "y",
	Z = "z",
}

struct RuleTest {
	predicate_type: #[id=rule_test] string,
	...minecraft:rule_test[[predicate_type]],
}

dispatch minecraft:rule_test[block_match] to struct BlockMatch {
	block: #[id=block] string,
}

dispatch minecraft:rule_test[blockstate_match] to struct BlockStateMatch {
	block_state: BlockState,
}

dispatch minecraft:rule_test[random_block_match] to struct RandomBlockMatch {
	block: #[id=block] string,
	probability: float @ 0..1,
}

dispatch minecraft:rule_test[random_blockstate_match] to struct RandomBlockStateMatch {
	block_state: BlockState,
	probability: float @ 0..1,
}

dispatch minecraft:rule_test[tag_match] to struct TagMatch {
	block: #[id(registry=block,tags=implicit)] string,
}
