dispatch minecraft:resource[font] to struct Font {
	providers: [GlyphProvider],
}

struct GlyphProvider {
	type: GlyphProviderType,
	...minecraft:glyph_provider[[type]],
	filter?: struct {
		[FontOption]: boolean,
	}
}

enum(string) GlyphProviderType {
	Bitmap = "bitmap",
	TrueType = "ttf",
	#[until="1.20"]
	LegacyUnicode = "legacy_unicode",
	#[since="1.20"]
	Unihex = "unihex",
	#[since="1.20"]
	Reference = "reference",
}

enum(string) FontOption {
	Uniform = "uniform",
	JapaneseVariants = "jp",
}

dispatch minecraft:glyph_provider[bitmap] to struct BitmapProvider {
	file: #[id(registry="texture",suffix=".png")] string,
	height?: int,
	ascent: int,
	chars: [string @ 1..] @ 1..,
}

dispatch minecraft:glyph_provider[ttf] to struct TtfProvider {
	file: (
		#[id(registry="font/ttf",suffix=".ttf")] string |
		#[id(registry="font/otf",suffix=".otf")] string |
	),
	size?: float,
	oversample?: float,
	shift?: [float, float],
	skip?: (string | [string]),
}

#[until="1.20"]
dispatch minecraft:glyph_provider[legacy_unicode] to struct LegacyUnicodeProvider {
	sizes: string,
	template: string,
}

#[since="1.20"]
dispatch minecraft:glyph_provider[unihex] to struct UnihexProvider {
	/// ZIP archive containing one or more *.hex files (files in archive with different extensions are ignored).
	hex_file: #[id(registry="font/unihex",suffix=".zip")] string,
	size_overrides?: struct UnihexSizeOverrides {
		/// Minimum in codepoint range (inclusive).
		from: string, // TODO: codepoint; "\u3001"
		/// Maximum in codepoint range (inclusive).
		to: string,
		/// Position of left-most column of the glyph.
		left: int @ 0..,
		/// Position of right-most column of the glyph.
		right: int @ 0..,
	},
}

/// Inclusion is performed after all fonts are loaded, so it will include all providers for a given font defined in all datapacks.
#[since="1.20"]
dispatch minecraft:glyph_provider[reference] to struct ReferenceProvider {
	id: #[id="font"] string,
}
