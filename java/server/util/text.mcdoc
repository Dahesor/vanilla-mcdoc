use super::inventory::InventoryItem

type Text = (
	string |
	TextObject |
	[Text] |
)

type TextObject = (
	struct {
		text: string,
		...TextBase,
	} |
	struct {
		translate: string, // TODO
		with?: [Text],
		...TextBase,
	} |
	struct {
		score: struct {
			objective: string, // TODO
			name: string, // TODO
		},
		...TextBase,
	} |
	struct {
		selector: string, // TODO
		...TextBase,
	} |
	struct {
		keybind: Keybind,
		...TextBase,
	} |
	struct {
		block: #[parser=vector(dimension=3,integer=true)] string,
		nbt: #[parser=nbt_path(category=block,id=[block])] string,
		...TextNbtBase,
	} |
	struct {
		entity: #[parser=selector(amount=multiple,type=entities)] string,
		nbt: #[parser=nbt_path(category=entity,id=[entity])] string,
		...TextNbtBase,
	} |
	struct {
		storage: #[id=storage] string,
		nbt: #[parser=nbt_path] string, // TODO
		...TextNbtBase,
	} |
)

struct TextNbtBase {
	interpret?: boolean,
	...TextBase,
}

struct TextBase {
	extra?: [Text],
	...TextStyle,
}

struct TextStyle {
	color?: (TextColor | TextFormat),
	#[since=1.16]
	font?: #[id=font] string,
	bold?: boolean,
	italic?: boolean,
	underlined?: boolean,
	strikethrough?: boolean,
	obfuscated?: boolean,
	insertion?: string,
	clickEvent?: ClickEvent,
	hoverEvent?: HoverEvent,
}

enum(string) TextColor {
	Black = "black",
	DarkBlue = "dark_blue",
	DarkGreen = "dark_green",
	DarkAqua = "dark_aqua",
	DarkRed = "dark_red",
	DarkPurple = "dark_purple",
	Gold = "gold",
	Gray = "gray",
	DarkGray = "dark_gray",
	Blue = "blue",
	Green = "green",
	Aqua = "aqua",
	Red = "red",
	LightPurple = "light_purple",
	Yellow = "yellow",
	White = "white",
}

enum(string) TextFormat {
	Obfuscated = "obfuscated",
	Bold = "bold",
	Strikethrough = "strikethrough",
	Underline = "underline",
	Italic = "italic",
	Reset = "reset",
}

struct ClickEvent {
	action: ClickEventAction,
	value: string, // TODO
}

enum(string) ClickEventAction {
	OpenUrl = "open_url",
	OpenFile = "open_file",
	RunCommand = "run_command",
	SuggestCommand = "suggest_command",
	ChangePage = "change_page",
	CopyToClipBoard = "copy_to_clipboard",
}

struct HoverEvent {
	action: HoverEventAction,
	...minecraft:hover_event[[action]],
}

enum(string) HoverEventAction {
	ShowText = "show_text",
	ShowItem = "show_item",
	ShowEntity = "show_entity",
}

dispatch minecraft:hover_event[show_text] to struct ShowTextHoverEvent {
	#[deprecated=1.16]
	value?: Text,
	#[since=1.16]
	contents?: Text,
}

dispatch minecraft:hover_event[show_item] to struct ShowItemHoverEvent {
	#[deprecated=1.16]
	value?: #[nbt=InventoryItem] string,
	#[since=1.16]
	contents?: struct {
		id: #[id=item] string,
		count?: int,
		tag?: #[nbt=minecraft:item[[id]]] string,
	},
}

dispatch minecraft:hover_event[show_entity] to struct ShowEntityHoverEvent {
	#[deprecated=1.16]
	value?: struct {
		name?: string,
		type?: string,
		id?: string,
	},
	#[since=1.16]
	value?: struct {
		name?: Text,
		type?: #[id=entity_type] string,
		id?: #[uuid] string,
	},
}

enum(string) Keybind {
	Advancements = "key.advancements",
	Attack = "key.attack",
	Back = "key.back",
	Chat = "key.chat",
	Command = "key.command",
	Drop = "key.drop",
	Forward = "key.forward",
	Fullscreen = "key.fullscreen",
	Hotbar1 = "key.hotbar.1",
	Hotbar2 = "key.hotbar.2",
	Hotbar3 = "key.hotbar.3",
	Hotbar4 = "key.hotbar.4",
	Hotbar5 = "key.hotbar.5",
	Hotbar6 = "key.hotbar.6",
	Hotbar7 = "key.hotbar.7",
	Hotbar8 = "key.hotbar.8",
	Hotbar9 = "key.hotbar.9",
	Inventory = "key.inventory",
	Jump = "key.jump",
	Left = "key.left",
	LoadToolbarActivator = "key.loadToolbarActivator",
	PickItem = "key.pickItem",
	Playerlist = "key.playerlist",
	Right = "key.right",
	SaveToolbarActivator = "key.saveToolbarActivator",
	Screenshot = "key.screenshot",
	SmoothCamera = "key.smoothCamera",
	Sneak = "key.sneak",
	SpectatorOutlines = "key.spectatorOutlines",
	Sprint = "key.sprint",
	SwapOffhand = "key.swapOffhand",
	TogglePerspective = "key.togglePerspective",
	Use = "key.use",
}
