use ::java::data::util::MinMaxBounds

// Some aliases for common utils.

// TODO - Add exports for all utilities to this file and refactor existing imports

type BannerPattern = banner_pattern::BannerPattern
type BlockState = block_state::BlockState
type ColorByte = color::ColorByte
type ColorInt = color::ColorInt
type ColorString = color::ColorString
type EffectId = effect::EffectId
type GlobalPos = global_pos::GlobalPos
type SlottedItem<T> = inventory::SlottedItem<T>
type Particle = particle::Particle

type Filterable<T> = (
	struct FilteredText {
		/// A list of tests. For each test, there must be at least one page whose raw contents match
		/// exactly.
		contains?: [T],
		/// When set total number of pages must match exactly or lie within the range.
		size?: MinMaxBounds<int @ 0..>,
		/// Checks the total number of pages that match this test.
		count?: [
			struct FilteredTextCountTest {
				/// The contents this page's raw text must match exactly.
				test: T,
				/// The number of pages that must match the test.
				count: MinMaxBounds<int @ 1..>
			}
		]
	}
)
