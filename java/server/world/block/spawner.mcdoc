use super::super::entity::AnyEntity
use super::super::super::util::range::InclusiveRange

dispatch minecraft:block[spawner] to struct Sign {
	...super::BlockEntity,
	/// Entities that can be placed.
	SpawnPotentials: [SpawnPotential],
	/// Data for the next mob to spawn.
	/// Overwritten by `SpawnPotentials`.
	SpawnData: (
		#[until=1.18] AnyEntity |
		#[since=1.18] SpawnerEntry |
	),
	/// Number of entities that will be placed.
	SpawnCount: short,
	/// Range that the spawned entities will be placed.
	SpawnRange: short,
	/// Ticks until the next spawn.
	Delay: short,
	/// Minimum random delay for the next spawn.
	MinSpawnDelay: short,
	/// Mximum random delay for the next spawn.
	MaxSpawnDelay: short,
	/// Maximum number of entities nearby.
	MaxNearbyEntities: short,
	/// Radius in blocks that a player has to be within to spawn entities.
	RequiredPlayerRange: short,
}

struct SpawnPotential {
	Entity: (
		#[until=1.18] AnyEntity |
		#[since=1.18] SpawnerEntry |
	),
	/// Weight for this entry to be chosen.
	#[until=1.18]
	Weight: (
		#[until=1.17] int @ 0.. | 
		#[since=1.17] byte @ 0.. |
	),
	/// Weight for this entry to be chosen.
	#[since=1.18]
	weight: int @ 0..,
}

struct SpawnerEntry {
	custom_spawn_rules: CustomSpawnRules,
	entity: AnyEntity,
}

struct CustomSpawnRules {
	/// Range of block light level required for the entity to spawn.
	block_light_limit: InclusiveRange<int @ 0..15>,
	/// Range of sky light level required for the entity to spawn.
	sky_light_limit: InclusiveRange<int @ 0..15>,
}
