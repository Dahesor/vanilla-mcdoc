use super::super::entity::AnyEntity
use super::super::super::util::range::InclusiveRange
use super::super::super::util::inventory::EquipmentSlot

dispatch minecraft:block_entity[spawner] to struct Spawner {
	...super::BlockEntity,
	/// Entities that can be placed.
	SpawnPotentials: [SpawnPotential],
	/// Data for the next mob to spawn.
	/// Overwritten by `SpawnPotentials`.
	SpawnData: (
		#[until=1.18] AnyEntity |
		#[since=1.18] SpawnerEntry |
	),
	/// Number of entities that will be placed.
	SpawnCount: short,
	/// Range that the spawned entities will be placed.
	SpawnRange: short,
	/// Ticks until the next spawn.
	Delay: short,
	/// Minimum random delay for the next spawn.
	MinSpawnDelay: short,
	/// Maximum random delay for the next spawn.
	MaxSpawnDelay: short,
	/// Maximum number of entities nearby.
	MaxNearbyEntities: short,
	/// Radius in blocks that a player has to be within to spawn entities.
	RequiredPlayerRange: short,
}

#[since="1.20.5"]
dispatch minecraft:block_entity[trial_spawner] to struct TrialSpawner {
	/// Spawning behavior when the player does not have the Bad Omen effect.
	normal_config: NormalConfig,
	/// Spawning behavior when the player has the Bad Omen effect.
	ominous_config: struct {
		...NormalConfig,
		/// Loot tables to use when summoning ominous item spawners.
		loot_tables_to_eject: [struct {
			data: #[id="loot_table"] string,
			weight: int,
		}],
	},
}

dispatch minecraft:block[spawner] to minecraft:block_entity[spawner]

dispatch minecraft:block[trial_spawner] to minecraft:block_entity[trial_spawner]

struct NormalConfig {
	/// Number of entities that will be placed.
	simultaneous_mobs: float,
	/// Number of entities that will be added per player.
	simultaneous_mobs_added_per_player: float,
	/// Ticks until the next spawn.
	ticks_between_spawn: int,
	/// Entities that can be placed.
	spawn_potentials: [SpawnPotential],
}

struct SpawnPotential {
	#[until="1.20.5"]
	Entity: (
		#[until=1.18] AnyEntity |
		#[since=1.18] SpawnerEntry |
	),
	#[since="1.20.5"]
	entity: SpawnerEntry,
	/// Weight for this entry to be chosen.
	#[until=1.18]
	Weight: (
		#[until=1.17] int @ 0.. | 
		#[since=1.17] byte @ 0.. |
	),
	/// Weight for this entry to be chosen.
	#[since=1.18]
	weight: int @ 0..,
	/// Rolled items from the specified loot table will be equipped to the mob that spawns.
	#[since="1.20.5"]
	equipment: SpawnEquipment,
}

struct SpawnEquipment {
	/// Generates the equipment.
	loot_table: #[id="loot_table"] string,
	/// Chance the mob will drop the equipment on death.
	slot_drop_chances: (
		float @ 0..1 |
		struct {
			[EquipmentSlot]: float @ 0..1,
		} |
	),
}

struct SpawnerEntry {
	custom_spawn_rules: CustomSpawnRules,
	entity: AnyEntity,
}

struct CustomSpawnRules {
	/// Range of block light level required for the entity to spawn.
	block_light_limit: InclusiveRange<int @ 0..15>,
	/// Range of sky light level required for the entity to spawn.
	sky_light_limit: InclusiveRange<int @ 0..15>,
}
