use ::java::server::util::text::Text
use ::java::server::util::Filterable

dispatch minecraft:data_component[writable_book_content] to struct WritableBookContent {
	pages: [Filterable<string>],
}

dispatch minecraft:data_component[written_book_content] to struct WrittenBookContent {
	pages?: [Filterable<#[text_component] string>],
	title: (Filterable<string @ ..32>),
	author: string,
	/// Number of times this written book has been copied. Defaults to 0. If the value is greater than 1, the book cannot be copied.
	generation?: Generation,
	/// Whether the dynamic content on the pages has been resolved.
	resolved?: boolean,
}

/// A writable book
dispatch minecraft:item[writable_book] to struct WritableBook {
	...super::ItemBase,
	#[since="1.20.5"]
	[#[id="data_component_type"] "writable_book_content"]?: minecraft:data_component[writable_book_content],
	#[until="1.20.5"]
	pages?: [string],
}

dispatch minecraft:item[written_book] to struct WrittenBook {
	...super::ItemBase,
	#[since="1.20.5"]
	[#[id="data_component_type"] "written_book_content"]?: minecraft:data_component[written_book_content],
	// TODO: Add filtered text
	/// Whether the dynamic content on the pages has been resolved.
	#[until="1.20.5"]
	resolved?: boolean,
	/// Pages of the book as JSON text components.
	#[until="1.20.5"]
	pages?: [#[text_component] string],
	/// Generation of the book.
	#[until="1.20.5"]
	generation?: Generation,
	#[until="1.20.5"]
	author?: string,
	#[until="1.20.5"]
	title?: string,
}

enum(int) Generation {
	Original = 0,
	Copy = 1,
	CopyOfCopy = 2,
	Tattered = 3,
}
