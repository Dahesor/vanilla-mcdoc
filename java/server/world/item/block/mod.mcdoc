use super::AdventureModePredicate
use ::java::data::advancement::predicate::BlockPredicate
use ::java::server::util::block_state::BlockState

/// List of blocks that this block item can be placed on.
dispatch minecraft:data_component[can_place_on] to (
	#[canonical] AdventureModePredicate |
	BlockPredicate |
)

/// NBT that the block entity that is placed can have.
dispatch minecraft:data_component[block_entity_data] to struct BlockEntityData {
	id: #[id="block_entity_type"] string,
	...minecraft:block_entity[[id]],
}

/// Blockstate that the placed block will have.
dispatch minecraft:data_component[block_state] to mcdoc:block_item_states[[%parent.id]]

type BlockItem = (
	#[since="1.20.5"] struct {
		...super::DefaultItemComponents,
		[#[id="data_component_type"] "can_place_on"]?: minecraft:data_component[[%key]],
		[#[id="data_component_type"] "block_entity_data"]?: minecraft:data_component[[%key]],
		[#[id="data_component_type"] "block_state"]?: minecraft:data_component[[%key]],
	} |
	#[until="1.20.5"] struct {
		...super::DefaultItemTags,
		/// List of blockstates that this block item can be placed on.
		CanPlaceOn?: [BlockState],
		BlockEntityTag?: BlockEntityData,
		/// Blockstate that the placed block will have.
		BlockStateTag?: mcdoc:block_item_states[[%parent.id]],
	} |
)

/// An item that can be placed as a block
dispatch minecraft:item[%blockitem] to BlockItem
