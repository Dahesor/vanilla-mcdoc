use ::java::server::util::SlottedItem

dispatch minecraft:data_component[container] to ([SlottedItem<byte @ 0..255>] @ 0..256)

dispatch minecraft:data_component[container_loot] to struct ContainerLoot {
	loot_table: #[id="loot_table"] string,
	seed?: long,
}

dispatch minecraft:data_component[lock] to string

dispatch minecraft:item[
	barrel,
	chest,
	trapped_chest,
	shulker_box,
	white_shulker_box,
	orange_shulker_box,
	magenta_shulker_box,
	light_blue_shulker_box,
	yellow_shulker_box,
	lime_shulker_box,
	pink_shulker_box,
	gray_shulker_box,
	light_gray_shulker_box,
	cyan_shulker_box,
	purple_shulker_box,
	blue_shulker_box,
	brown_shulker_box,
	green_shulker_box,
	red_shulker_box,
	black_shulker_box,
] to struct Container27 {
	...super::BlockItem,
	/// Slots from 0 to 26.
	[#[id="data_component_type"] "container"]?: [SlottedItem<byte @ 0..26>] @ 0..27,
	[#[id="data_component_type"] "container_loot"]?: minecraft:data_component[%key],
	/// Flattens the `minecraft:custom_name`'s text component and does an exact match, case-sensitive.
	[#[id="data_component_type"] "lock"]?: string,
}

dispatch minecraft:item[dispenser, dropper] to struct Container9 {
	...super::BlockItem,
	/// Slots from 0 to 8.
	[#[id="data_component_type"] "container"]?: [SlottedItem<byte @ 0..8>] @ 0..9,
}
