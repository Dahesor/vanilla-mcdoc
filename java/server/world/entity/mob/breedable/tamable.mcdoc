struct Tamable {
	...super::Breedable,
	/// The UUID of the owner
	#[until=1.16,uuid]
	OwnerUUID: string,
	/// The UUID of the owner
	#[since=1.16,uuid]
	Owner: int[] @ 4,
	/// Whether the mob is sitting
	Sitting: boolean,
}

dispatch minecraft:entity[cat] to struct Cat {
	...Tamable,
	/// The type of the cat
	#[until=1.19]
	CatType: CatType,
	/// The cat's collar color, present for stray cats
	CollarColor: Color,
	#[since=1.19]
	variant: #[id=cat_variant] string,
}

enum(int) CatType {
	Invisible = -1,
	Tabby = 0,
	Tuxedo = 1,
	Red = 2,
	Siamese = 3,
	Shorthair = 4,
	Calico = 5,
	Persian = 6,
	Ragdoll = 7,
	White = 8,
	Jellie = 9,
	Black = 10
}

dispatch minecraft:entity[parrot] to struct Parrot {
	...Tamable,
	/// The UUID of the owner
	#[until=1.16,uuid]
	OwnerUUID: string,
	/// The UUID of the owner
	#[since=1.16,uuid]
	Owner: int[] @ 4,
	/// Whether the parrot is sitting
	Sitting: boolean,
	/// The variant of the parrot
	Variant: ParrotVariant,
}

enum(int) ParrotVariant {
	Red = 0,
	Blue = 1,
	Green = 2,
	Cyan = 3,
	Gray = 4,
}

dispatch minecraft:entity[wolf] to struct Wolf {
	...Tamable,
	#[since=1.16]
	...super::super::NeutralMob
	/// Whether the wolf is angry
	#[until=1.16]
	Angry: boolean,
	/// The wolf's collar color, present for wild wolfs
	CollarColor: Color,
}
