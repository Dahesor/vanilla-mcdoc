use ::java::server::util::InventoryItem
use ::java::server::util::SlottedItem
use ::java::server::util::FlagMemory
use ::java::server::util::TickMemory

dispatch minecraft:entity[zombie_horse] to struct HorseBase {
	...super::Breedable,
	/// Unknown use
	/// Remains `0` even if the mob was bred
	Bred: boolean,
	/// Whether the mob is eating a haystack
	EatingHaystack: boolean,
	/// Whether the mob has been tamed
	Tame: boolean,
	/// Higher values make the mob easier to tame
	/// Increases with feeding
	Temper: int @ 0..100,
	/// UUID of the player who tamed the mob
	#[until=1.16] #[uuid]
	OwnerUUID: string,
	/// UUID of the player who tamed the mob
	#[since=1.16] #[uuid]
	Owner: int[] @ 4,
	/// The saddle item of the mob
	SaddleItem: InventoryItem,
}

dispatch minecraft:entity[horse] to struct Horse {
	...HorseBase,
	/// The armor item of the horse
	ArmorItem: InventoryItem,
	/// The variant of the horse
	Variant: int,
}

dispatch minecraft:entity[donkey,mule] to struct ChestedHorse {
	...HorseBase,
	/// Whether the horse has a chest
	ChestedHorse: boolean,
	/// The items in the horse's chest
	Items: [SlottedItem],
}

dispatch minecraft:entity[skeleton_horse] to struct SkeletonHorse {
	...HorseBase,
	/// Whether the skeleton horse is trapped
	SkeletonTrap: boolean,
	/// How many ticks the skeleton horse trap has been alive
	SkeletonTrapTime: int,
}

#[since=1.17]
dispatch minecraft:entity[camel] to struct Camel {
	...HorseBase,
	Brain: struct {
		memories: struct {
			/// Ticks until it can look around randomly again.
			"minecraft:gaze_cooldown_ticks": TickMemory,
			/// Tempted by the player.
			"minecraft:is_tempted": FlagMemory,
			/// Ticks until it can be tempted again.
			"minecraft:temptation_cooldown_ticks": TickMemory,
		},
	},
	/// Whether the camel is sitting
	IsSitting: boolean,
	/// The tick when the camel started changing its pose
	LastPoseTick: long
}
