use ::java::server::util::inventory::InventoryItem
use ::java::server::util::codec::GlobalPos;
use super::super::AnyEntity

dispatch minecraft:entity[player] to struct Player {
	...super::LivingEntity,
	/// The version of the player NBT structure
	DataVersion: int,
	/// The dimension the player is in
	Dimension: (
		#[until=1.16] Dimension |
		#[since=1.16,id=dimension] string |
	),
	/// The location of the player's last death
	#[since=1.19]
	LastDeathLocation: GlobalPos,
	/// The game mode that the player is in
	playerGameType: Gamemode,
	/// The previous game mode that the player was in
	#[since=1.16]
	previousPlayerGameType: Gamemode,
	/// The score to display upon death
	Score: int,
	/// The hotbar slot the player has selected
	SelectedItemSlot: int @ 0..8,
	/// The item in the hotbar slot the player has selected
	SelectedItem: SlottedItem,
	/// The dimension of the player's respawn point
	#[since=1.16]
	SpawnDimension: #[id=dimension],
	/// The x coordinate of the player's spawn point
	SpawnX: int,
	/// The y coordinate of the player's spawn point
	SpawnY: int,
	/// The z coordinate of the player's spawn point
	SpawnZ: int,
	/// Whether the player must spawn at the spawn point
	SpawnForced: boolean,
	/// The number of ticks the player has been in bed
	SleepTimer: short,
	/// The level of the hunger bar
	foodLevel: int,
	/// The rate at which the `foodSaturationLevel` depletes
	foodExhaustionLevel: float,
	/// The rate at which the hunger bar depletes
	foodSaturationLevel: float,
	/// The number of ticks until the player heals or takes starvation damage
	foodTickTimer: int,
	/// The number of experience levels the player has
	XpLevel: int,
	/// The percentage the experience bar is filled up
	XpP: float,
	/// The total experience the player has
	XpTotal: int,
	/// The seed for enchantments
	XpSeed: int,
	/// The player's inventory
	Inventory: [SlottedItem] @ 0..41,
	/// The player's enderchest inventory
	EnderItems: [SlottedItem] @ 0..27,
	/// The abilities of the player
	abilities: Abilities,
	/// The position that the player entered the nether at
	enteredNetherPosition: EnteredNetherPosition,
	/// The entity that the player is riding
	RootVehicle: RootVehicle,
	/// The entity that is on the player's left shoulder
	ShoulderEntityLeft: AnyEntity,
	/// The entity that is on the player's right shoulder
	ShoulderEntityRight: AnyEntity,
	/// Whether the player has gone to the overworld after defeating the Ender Dragon
	seenCredits: boolean,
	/// The recipes that the player has
	recipeBook: RecipeBook,
	/// Tracking the warden spawning process for this player
	#[since=1.19]
	warden_spawn_tracker: WardenSpawnTracker,
	// these are not included
	id: (),
	CustomName: (),
	CustomNameVisible: (),
}

enum(int) Dimension {
	Nether = -1,
	Overworld = 0,
	End = 1,
}

enum(int) Gamemode {
	Survival = 0,
	Creative = 1,
	Adventure = 2,
	Spectator = 3,
}

struct Abilities {
	/// The speed that the player walks at
	walkSpeed: float @ 0.1,
	/// The speed that the player flies at
	flySpeed: float @ 0.05,
	/// Whether the player can fly
	mayfly: boolean,
	/// Whether the player is flying
	flying: boolean,
	/// Whether the player can only take damage from the void
	invulnerable: boolean,
	/// Whether the player may build
	mayBuild: boolean,
	/// Whether the player destroys blocks instantly
	instabuild: boolean,
}

struct EnteredNetherPosition {
	/// The x coordinate that the player entered the nether
	x: double,
	/// The y coordinate that the player entered the nether
	y: double,
	/// The z coordinate that the player entered the nether
	z: double,
}

struct RootVehicle {
	/// The upper bits of the ridden entity's UUID
	#[until=1.16]
	AttachMost: long,
	/// The lower bits of the ridden entity's UUID
	#[until=1.16]
	AttachLeast: long,
	/// The UUID of the ridden entity
	#[since=1.16]
	Attach: int[] @ 4,
	/// The ridden entity
	Entity: AnyEntity,
}

struct RecipeBook {
	/// The recipes the player has acquired
	recipes: #[id=recipe] string,
	/// The recipes that should pulse in the crafting book
	toBeDisplayed: #[id=recipe] string,
	/// Whether the player has filtered crafting on in the crafting table
	isFilteringCraftable: boolean,
	/// Whether the player has the crafting book open in the crafting table
	isGuiOpen: boolean,
	/// Whether the player has filtered crafting on in the furnace
	isFurnaceFilteringCraftable: boolean,
	/// Whether the player has the crafting book open in the furnace
	isFurnaceGuiOpen: boolean,
}

struct WardenSpawnTracker {
	/// The number of ticks before the `warning_level` can be increased again.
	/// Decreases by 1 every tick. It is set to 200 game ticks (10 seconds) every time the warning level is increased
	cooldown_ticks: int @ 0..,
	/// The number of ticks since the player was warned for warden spawning.
	/// Increases by 1 every tick. After 12000 game ticks (10 minutes) it will be set back to 0,
	/// and the `warning_level` will be decreased by 1.
	ticks_since_last_warning: int @ 0..,
	/// The warden will spawn at level 3
	warning_level: int @ 0..3
}